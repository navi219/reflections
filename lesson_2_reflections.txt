What happens when you initialize a repository? Why do you need to do it?

	A directory of metadata called .git is created. This tracks commits. It's necessary to designate specific folders to track so Git knows the scope of the tracked fileset.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is essentially temporary, existing between the working directory and the commit. It provides a "surface" on which the pieces of an upcoming commit can be consolidated and arranged. This can aid in ensuring the next commit represents a coherent logical modification. By selectively adding files rather than the whole folder, clutter within the commits is reduced, assiting in a conceptual understanding of changes as well as easing troubleshooting and rollback.
	
How can you use the staging area to make sure you have one commit per logical
change?

	You can choose to include in a commit only those modifications contributing to the logical change which that commit identifies. It's a way to partition changes which may have been made in parallel, but which are logically independent.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Multilingual or regional versions. Experimental features. Different approach to underlying framework. Branches allow experimentation without losing original branch/thread.


How do the diagrams help you visualize the branch structure?

	Branches can get complex. It's important to see wheh two branches last shared a common commit.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of GitтАЩs automatic merging vs. always doing merges
manually?
